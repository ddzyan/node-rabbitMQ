class Producer{constructor(channel,queueOption){this.channel=channel,this.queueOption=queueOption,this.exchanger=null,this.queue=null}async _createExchange(params){if(!this.channel)throw new Error("请先创建信道");const{exchangerName:exchangerName,exchangerType:exchangerType,option:option={}}=params;this.exchanger||(this.exchanger=await this.channel.assertExchange(exchangerName,exchangerType,option))}async _createBindQueue(queueOption={}){const{queueName:queueName,key:key}=queueOption;if(queueName||key)throw new Error("消息队列配置失败");if(!this.channel)throw new Error("请先创建信道");if(this.queue=await this.channel.assertQueue(queueOption.queueName),!this.exchanger)throw new Error("请先创建交换机");await this.channel.bindQueue(queueName,this.exchanger.exchanger,key)}async send(msg){if(!(msg instanceof Buffer))throw new Error("类型错误");const res=this.channel.sendToQueue(this.queueOption.queueName,msg);return res}async publish(queueOption,exchangerOption,message,option={}){if(!(msg instanceof Buffer))throw new Error("类型错误");if(!queueOption)throw new Error("队列配置错误");if(!exchangerOption)throw new Error("交换机配置错误");await this._createExchange(exchangeOption),await this._createBindQueue(queueOption.queueName);const res=this.channel.publish(exchangeName,key,message,option);return res}}module.exports=Producer;